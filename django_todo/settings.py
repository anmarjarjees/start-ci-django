"""
Django settings for django_todo project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
# Importing the dj_database_url to be used with our database connection:
from pathlib import Path
import dj_database_url

# We need to import os to be used in this file:
import os

# Our Code:
# Adding/Creating a variable called "development":
development = os.environ.get('DEVELOPMENT', False)
# The line above means that:
# If there's an environment variable called "DEVELOPMENT" in the environment
# The variable "development" will be set to the value of "DEVELOPMENT"
# etherwise (if DEVELOPMENT does NOT exist) => the variable development will be set to "False"


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Below is the default code:
# SECRET_KEY = 'k5!mr=q&v(fz(af5omr^slfnk2xb4020paohr)d)_ati7&(*lq'

# Our changes:
# Instead of setting the secret key manually (not secured and not recommended as written in Django comment)
# We will use os.environ.get() method
# We use this method to get an environment variable called "SECRET_KEY"
# This function allowes us to set the secret key at the operating system level instead of in our code
# os.envrion.get(argument1, argument2)
# argument1 ==> will be the value of our SECRET_KEY that we need to set using the operating system level
# argument2 ==> will be the default value to be used if the SECRET_KEY is not set
SECRET_KEY = os.environ.get(
    'SECRET_KEY', 'k5!mr=q&v(fz(af5omr^slfnk2xb4020paohr)d)_ati7&(*lq')

# SECURITY WARNING: don't run with debug turned on in production!
# We will change this line, instead of DEBUG = True or DEBUG = False
# DEBUG = True
# We can just set it to our variable "development" that we created at the top of this file:
# This means that in development it will be "True" but in Heroku it will be "False"
# and that's what we need:
DEBUG = development
# We want to do it like this so in case if we have any error in heroku app (the life running),
# we don't want to expose any internal source code on the erro page


# Changing the ALLOWED_HOSTS list to add our heroku url for our app
# ALLOWED_HOSTS = [] # it's empty by default
# *****************************************************************
# adding our urls:
# Notice that we cannot include the "https://" and the last symbol "/"
# We can comment this code of writing/placing our url here and using the os.environ.get() feature to save our host url
# ALLOWED_HOSTS = ['your-app-name.herokuapp.com']

# Instead of writing our host url directly, we also add a variable (CONSTANT) called "Heroku"
# The same like as we did with the SECRET_KEY
# ALLOWED_HOSTS = [os.environ.get('HEROKU_HOSTNAME')]

# Using if condition to check:
# if we are in development mode (local Django app) => then use our local host as "ALLOWED_HOSTS":
if development:
    ALLOWED_HOSTS = ['localhost']
# otherwise use Heroku host:
else:
    ALLOWED_HOSTS = [os.environ.get('HEROKU_HOSTNAME')]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'todo'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_todo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_todo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Using if condition to check:
# if we are in development mode (local Django app) => then use this code to connect to our SQLite3 database:
if development:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
# otherwise use the database URL configuration for Heroku:
else:
    DATABASES = {
        # Changing the value of the default database with a call to "dj_database_url.pars"
        # Using parse(' The full url string from heroky goes here ') function and paste the the full Database URL from Heroku
        # instead of placing the complex long string for our Heroku Postgres Database url,
        # we can use again the os.environment.get() variable
        # 'default': dj_database_url.parse('postgres://sjshrtjwkfpyos:cba8d8d7ccb1fe65ac63d3e2f0af01ed46b608bb12258df6068c1beac538387c@ec2-52-23-190-126.compute-1.amazonaws.com:5432/db9dsgqun1ns2b')
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
